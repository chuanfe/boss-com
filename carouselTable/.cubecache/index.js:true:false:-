{"queryPath":"/index.js","absPath":"/Applications/code/datav/carouselTable/index.js","realPath":"/index.js","type":"script","source":"const Event = require(\"bcore/event\");\nconst $ = require(\"jquery\");\nconst _ = require(\"lodash\");\nconst anime = require(\"animejs\");\n\nmodule.exports = Event.extend(function (container, config) {\n  console.log('constructor')\n  this.container = $(container);\n  this.config = {\n    width: this.container.width(),\n    height: this.container.height(),\n    \"background-color\": \"transparent\",\n    theme: {},\n    global: {\n      animation: {\n        singleStop: !1\n      },\n      ifRowHidden: !1,\n      textAnimate: {\n        ifRun: !1,\n        animateDur: 2\n      },\n      ifUpdateImd: !1\n    }\n  };\n  // 表头渲染函数\n  this.headerTpl = (header) => `\n    <div class=\"line header\" style=\"\n      display: flex;\n      align-items: center;\n      background-color: ${header.backgroundColor};\n      height: ${header.height}px;\n      text-overflow: \n      ellipsis;\n      white-space: nowrap;\n      overflow: hidden;\n      vertical-align: middle;\n      color: ${header.color};\"\n    >\n      ${header.hasIndex && `\n        <div class=\"index-list\" style=\"\n          display: inline-block;\n          vertical-align: middle;\n          width: ${header.idListWidth}%;\n          height: ${header.height}px;\"\n        ></div>\n      `}\n      ${header.column}\n    </div>\n  `\n  // 表行渲染函数\n  this.rowTpl = (row) => `\n    <div class=\"line row-content\" style=\"\n      height: ${row.height}px;\n      text-overflow: ellipsis;\n      overflow: hidden;\n      vertical-align: middle; \n      display: flex;\n      align-items: center;\n      background-color: ${row.bgColor};\"\n    >\n      ${row.hasIndex && `\n        <div class=\"index\" style=\"\n          display: inline-block;\n          text-align: center;\n          vertical-align: middle;\n          width: ${row.idListWidth}%;\n          color: ${row.idListColor};\n          font-size: ${row.idListFontSize}px;\"\n        >\n          <div class=\"index-bg\" style=\"\n            background-color: ${row.idListBgColor}; \n            font-weight: ${row.fontWeight}; \n            width: ${row.bgSize}px;\n            height: ${row.bgSize}px;\n            line-height: ${row.bgSize}px;\n            vertical-align: middle;\n            margin: auto;\n            border-radius: ${row.radius}px;\n            text-align: center;\"\n          >\n          </div>\n        </div>\n      `}\n    </div>\n  `\n\n  // cell渲染函数\n  this.cellTpl = cell => `\n    <div class=\"${cell.classname}\" style=\"\n      width: ${cell.width}%;\n      display:inline-block;\n      text-align: ${cell.textAlign};\n      ${cell.isBr ? `word-break:break-all;` : `white-space: nowrap;`}\n      overflow: hidden;\n      vertical-align: middle;\n      background-color: transparent;\n      font-size: ${cell.fontSize}px;\n      color: ${cell.color};\n      font-weight: ${cell.fontWeight};\"\n    >\n      ${cell.content}\n      <div class=\"marquee-text\" style=\"display: inline-block;\">\n        <span style=\"display: inline-block;\" class=\"marquee-text-span\"></span>\n        <i class=\"whiteSpace\" style=\"display:inline-block;width:${cell.whiteWidth};\"></i>\n        ${cell.ifRun && !cell.isBr ?  `\n          <span style=\"display: inline-block;\" class=\"marquee-text-span\"></span>\n          <i class=\"whiteSpace\" style=\"display:inline-block;width:${cell.whiteWidth};\"></i>\n        ` : ''}\n      </div>\n    </div>\n  `\n  this._data = null,\n  this.apis = config.apis,\n  this.isInit = !0,\n  this.startIndex = 0,\n  this.titleList = [],\n  this.textTimer = {},\n  this.init(config);\n}, {\n  init: function (config) {\n    console.log('init')\n    this.mergeConfig(config);\n    this.updateStyle();\n    this.initInteraction();\n  },\n  // 绑定交互事件\n  initInteraction: function () {\n    var self = this;\n    self.container.css(\"cursor\", \"pointer\");\n    self.container.off(\"mouseenter\").off(\"mouseleave\").on(\"mouseenter\", function () {\n      self.removeTimer()\n    }).on(\"mouseleave\", function (e) {\n      var c = e.toElement || e.relatedTarget;\n      if(!this.contains(c) && self.config.global.isLoop) {\n        self.mouseTimer = setTimeout(\n          self.loop.bind(self), \n          1e3 * self.config.global.animation.duration\n        )\n      }\n    })\n  },\n  initPool: function () {\n    this.dataPool = [];\n  },\n  // 设置表格头\n  setHeader: function (series, header) {\n    let headerHtml = '';\n    series.forEach(serie => {\n      headerHtml += this.cellTpl({\n        width: serie.width,\n        height: header.height,\n        content: serie.displayName,\n        textAlign: header.textStyle.textAlign,\n        whiteWidth: 0,\n        classname: \"column column-title\",\n        isBr: header.isBr,\n        ifRun: this.config.global.textAnimate.ifRun,\n        fontSize: header.textStyle.fontSize,\n        color: header.textStyle.color,\n        fontWeight: header.textStyle.fontWeight\n      });\n    })\n\n    header.column = headerHtml;\n    header.color = header.textStyle.color;\n    header.fontSize = header.textStyle.fontSize;\n    header.fontWeight = header.textStyle.fontWeight;\n\n    this.container.append(this.headerTpl(header))\n  },\n  setRowNodeStr: function (rowStyle) {\n    this.rowStr = this.rowTpl(rowStyle)\n  },\n  appendRow: function (rowCount, series) {\n    const self = this;\n    for (var i = 0; i < rowCount; i++) {\n      const rowBg2 = this.config.row.backgroundColor2;\n      let $rowEl = $(this.rowStr);\n      let rowStr = \"\";\n\n      1 === i % 2 && $rowEl.css({\n        \"background-color\": rowBg2\n      });\n      series.forEach(serie => {\n        rowStr += this.cellTpl({\n          width: serie.width,\n          height: serie.height,\n          content: \"\",\n          bgColor: serie.backgroundColor,\n          textAlign: serie.textStyle.textAlign,\n          whiteWidth: 0,\n          classname: \"column cell-content\",\n          isBr: serie.isBr,\n          ifRun: self.config.global.textAnimate.ifRun,\n          fontSize: serie.textStyle.fontSize,\n          color: serie.textStyle.color,\n          fontWeight: serie.textStyle.fontWeight\n        })\n      })\n      $rowEl.append(rowStr);\n      $rowEl.on(\"click\", function () {\n        var data = $(this).data(\"data\");\n        self.emit(\"row-clicked\", data);\n      })\n      this.container.append($rowEl)\n    }\n  },\n  // 移除所有定时器\n  removeTimer: function () {\n    this.timer && clearTimeout(this.timer);\n    this.mouseTimer && clearTimeout(this.mouseTimer);\n    this.visibleTimer && clearTimeout(this.visibleTimer);\n    this.timer = null;\n    this.mouseTimer = null;\n    this.visibleTimer = null;\n    this.removeTextTimer();\n  },\n  // 清除指定文字滚动定时器\n  removeTargetTextTimer: function (textTimerId) {\n    if(this.textTimer[textTimerId]) {\n      this.textTimer[textTimerId].pause && this.textTimer[textTimerId].pause();\n      his.textTimer[a] = null;\n    }\n  },\n  // 清除所有文字滚动定时器\n  removeTextTimer: function () {\n    _.map(this.textTimer, (v, i) => {\n      if(v) {\n        v.seek && v.seek(0);\n        v.pause && v.pause();\n      }\n      delete this.textTimer[i];\n    })\n  },\n  // 初始化轮播列表\n  initRank: function () {\n    console.log('initRank')\n    var cfg = this.config;\n    this.removeTimer();\n    this.initPool();\n    this.container.find(\".row-content\").off(\"click\"); \n    this.container.empty();\n    this.container.css({\n      overflow: \"hidden\",\n      \"background-color\": cfg[\"background-color\"]\n    });\n\n    const {header, idList, series } = cfg;\n\n    this.columnNameList = _.map(series, \"columnName\");\n    console.log(this.columnNameList);\n    if(header.show) {\n      header.hasIndex = idList.show;\n      header.idListWidth = idList.width;\n      header.height = cfg.height * (header.heightPercent / 100);\n      this.setHeader(series, header);\n    } else {\n      header.height = 0;\n    }\n    var rowCount = cfg.global.rowCount;\n\n    var rowStyle = {\n      rowCount: rowCount,\n      height: (cfg.height - header.height) / rowCount,\n      hasIndex: idList.show,\n      idListWidth: idList.width,\n      idListRadius: idList.radius,\n      idListBgColor: idList.backgroundColor,\n      idListColor: idList.textStyle.color,\n      idListFontSize: idList.textStyle.fontSize,\n      bgColor: cfg.row.backgroundColor1,\n      fontWeight: idList.textStyle.fontWeight,\n    };\n    rowStyle.bgSize = Math.min(Math.floor(this.container.width() * idList.width / 100), rowStyle.height) * rowStyle.idListRadius / 100 - 4,\n    rowStyle.radius = rowStyle.bgSize / 2;\n\n    this.setRowNodeStr(rowStyle);\n    this.appendRow(rowCount*2, series);\n  },\n  updateData: function (data) {\n    data && (this.dataPool = data);\n  },\n  // 获取展示的数据\n  getData: function (dataPool, startIndex, rowCount) {\n    const filterData = [];\n    if(startIndex > dataPool.length - 1) { // 截取位置超出数组长度\n      if(\"bottom\" === this.config.global.animation.mode && 0 < dataPool.length) {\n        startIndex %= dataPool.length;\n      } else {\n        startIndex = 0;\n      }\n    }\n    for (var i = startIndex; i < startIndex + rowCount; i++) {\n      if (dataPool[i] && undefined !== dataPool[i]) {\n        var k = _.cloneDeep(dataPool[i]);\n        k.index = i + 1,\n        filterData.push(k);\n      } else\n      filterData.push({})\n    }\n    return {\n      data: filterData,\n      index: startIndex\n    }\n  },\n  setStartIndex: function (dataPool, startIndex, step) {\n      startIndex += step;\n      startIndex > dataPool.length - 1 && (startIndex = 0),\n      this.startIndex = startIndex;\n  },\n  initFill: function (dataPool, startIndex) {\n    const cfg = this.config;\n    const series = cfg.series;\n    const columnNameList = this.columnNameList || [];\n    $rows = this.container.find(`.row-content:lt(${cfg.global.rowCount})`);\n    $rows.each(function (index, rowEl) {\n      var item = dataPool[startIndex + index];\n      const $row = $(rowEl);\n      if(item) {\n        $row.find(\".cell-content\").each(function (cIndex, cellEl) {\n          var i = columnNameList[cIndex];\n          const j = series[cIndex].dataType;\n          let renderStr = \"\";\n          if(\"img\" === j) {\n            renderStr = `<img src=\"${item[i] || \"\"}\" style=\"width: ${series[cIndex].widthPercent}%; height: 100%\" />`;\n            console.log(renderStr);\n          } else if(item[i] || 0 === +item[i]) {\n            renderStr = item[i];\n          } else {\n            renderStr = \"-\";\n          }\n          const $mt = $(cellEl).find(`.marquee-text`);\n          const $mtSpan = $(cellEl).find(`.marquee-text`).find(\".marquee-text-span\");\n          console.log($mtSpan, renderStr);\n          $mtSpan.html(renderStr);\n          $mt.attr(\"indexnum\", `${startIndex + index + 1}-${cIndex}`);\n        });\n        $row.data(\"data\", item);\n        $row.find(\".index-bg\").html(startIndex + index + 1);\n      }\n    });\n    this.setStartIndex(dataPool, startIndex, cfg.global.rowCount);\n  },\n  // 计算转换值\n  calTransform: function (alignType, b) {\n    const c = b.find(\".marquee-text-span\");\n    if(alignType === 'left') {\n      return 0;\n    } else if(alignType === 'center') {\n      return b.width() / 2 - c.width() / 2;\n    } else if(alignType === 'right') {\n      return b.width() - c.width() - 1;\n    } else {\n      return 0;\n    }\n  },\n  // 填充文字\n  fillCell: function (a, b) {\n    const self = this;\n    const cfg = this.config;\n    var startIndex = a.index;\n    var rowBg1 = cfg.row.backgroundColor1;\n    var rowBg2 = cfg.row.backgroundColor2;\n    let $rows = this.container.find(`.row-content:gt(${cfg.global.rowCount - 1})`);\n    b && ($rows = this.container.find(`.row-content:lt(${cfg.global.rowCount})`));\n\n    $rows.each(function (rowIndex, rowEl) {\n      var rowObj = a.data[rowIndex];\n      var realIndex = startIndex + rowIndex + 1;\n      if (rowObj) {\n        if (0 === Object.keys(rowObj).length && cfg.global.ifRowHidden) {\n          return $(rowEl).css(\"opacity\", 0);\n        }\n        $(rowEl).css(\"opacity\", 1);\n        $(rowEl).find(\".cell-content\").each(function (cellIndex, cellEl) {\n          var i = self.columnNameList[cellIndex];\n          var j = self.config.series[cellIndex].dataType;\n          var k = \"\";\n          if(\"img\" === j) {\n            k = `<img src=\"${rowObj[i] || \"\"}\" style=\"width: ${cfg.series[cellIndex].widthPercent}%; height:100%;\" />`\n          } else if(rowObj[i] || 0 === +rowObj[i]) {\n            k = rowObj[i];\n          } else {\n            k = \"-\";\n          }\n          var $mt = $(this).find(`.marquee-text`);\n          var $mtSpan = $(this).find(`.marquee-text`).find(\".marquee-text-span\");\n          var indexNum = `${realIndex}-${cellIndex}`;\n          console.log($mtSpan, k);\n          $mtSpan.html(k);\n          $mt.attr(\"indexnum\", indexNum);\n          $(cellEl).find(\".whiteSpace\").css({\n            width: $(cellEl).width() - $($mtSpan[0]).width() - 1\n          });\n          if(j !== 'img') {\n            $mt.css(\"transform\", `translateX(${self.calTransform(cfg.series[cellIndex].textStyle.textAlign, $(this))}px)`);\n          }\n          // 不自动换行 且 设置了溢出文本滚动 且 文字溢出\n          if(!cfg.series[cellIndex].isBr && cfg.global.textAnimate.ifRun && $mtSpan.width() > $(this).width() && $mt.attr(\"indexnum\") === indexNum) {\n            self.removeTargetTextTimer(indexNum);\n            self.textRun(indexNum, $mt, cellIndex);\n          }\n        }),\n        $(rowEl).css(\"background-color\", 0 == realIndex % 2 ? rowBg1 : rowBg2),\n        $(rowEl).data(\"data\", rowObj),\n        $(rowEl).find(\".index-bg\").html(realIndex)\n      }\n    })\n  },\n  // 溢出文本滚动\n  textRun: function (textTimerId, $mt, cellIndex) {\n    const { global: { textAnimate: {animateDur} }, series} = this.config;\n    setTimeout(() => {\n      this.textTimer[textTimerId] = anime({\n        targets: $mt[0],\n        translateX: -$mt.outerWidth() / 2 + this.calTransform(series[cellIndex].textStyle.textAlign, $mt.parent()),\n        duration: 1e3 * animateDur,\n        loop: true,\n        delay: 500,\n        easing: \"linear\"\n      });\n    }, 0)\n  },\n  // 动画\n  animation: function () {\n    var aniEl = this.config.global.animation.mode === \"bottom\" ? \n      this.container.find(\".row-content:first\") : \n      this.container.find(`.row-content:lt(${this.config.global.rowCount})`);\n    let count = 0;\n    const aniCb = () => {\n      count ++;\n      if (count >= aniEl.length) {\n        aniEl.off(\"transitionend\", aniCb);\n        const fragment = document.createDocumentFragment();\n        aniEl.each((i, el) => {\n          fragment.appendChild(el)\n        }),\n        this.container[0].appendChild(fragment);\n        aniEl.css({\n          transition: \"none\",\n          height: (this.config.height - this.config.header.height) / this.config.global.rowCount + \"px\"\n        })\n      }\n    }\n    aniEl.on(\"transitionend\", aniCb);\n    aniEl.css({\n      height: 0,\n      transition: \"height 400ms linear\"\n    })\n  },\n  // 轮播\n  loop: function () {\n    let {global: {animation: {mode, duration}, rowCount}} = this.config;\n    this.removeTimer();\n    if (this.dataPool) {\n      var step;\n      if(mode === 'bottom') {\n        step = 1;\n        ++rowCount;\n      } else {\n        step = rowCount;\n        rowCount *= 2;\n      }\n      if (this.isInit) {\n        this.initFill(this.dataPool, this.startIndex);\n      } else {\n        var data = this.getData(this.dataPool, this.startIndex, rowCount);\n        this.fillCell(data);\n        this.animation();\n        this.setStartIndex(this.dataPool, this.startIndex, step);\n      }\n      this.timer = setTimeout(this.reset.bind(this), 1e3 * duration);\n    }\n  },\n  reset: function () {\n    this.loop();\n  },\n  render: function (_data, config) {\n    console.log('render')\n    const self = this;\n    const cfg = this.mergeConfig(config);\n    const data = this.data(_data);\n    // 设置全局和头部字体样式\n    this.container.css({\n      fontFamily: `\"${cfg.global.fontFamily}\"`\n    });\n    this.container.find(\".header\").css({\n      fontFamily: `\"${cfg.header.textStyle.fontFamily}\"`\n    });\n    if (data) {\n      this.updateData(data);\n      // 如果轮播模式且单页不轮播且不满一页且设置了单页不轮播\n      if (!cfg.global.isLoop || cfg.global.animation.singleStop && data.length <= cfg.global.rowCount) {\n        this.removeTimer();\n        this.isInit = true;\n        if (this.dataPool) {\n          const data = this.getData(this.dataPool, 0, cfg.global.rowCount);\n          this.fillCell(data, !self.isLoop)\n        }\n      } else { // 轮播状态\n        if (this.isInit) {\n          this.removeTimer();\n          if (this.dataPool) {\n            let data = this.getData(this.dataPool, this.startIndex, cfg.global.rowCount);\n            this.fillCell(data, !self.isLoop)\n          }\n          this.loop();\n          this.isInit = false;\n        }\n        this.visibleEventAdd || document.addEventListener(\"visibilitychange\", () => {\n          self.visibleTimer && clearTimeout(self.visibleTimer);\n          let a = document.visibilityState;\n          if(document.visibilityState === 'visible') {\n            self.visibleTimer = setTimeout(self.loop.bind(self), 1e3 * self.config.global.animation.duration)\n          } else if (document.visibilityState === 'hidden'){\n            clearTimeout(self.visibleTimer);\n            this.removeTimer();\n            this.removeTextTimer();\n          }\n        })\n        this.visibleEventAdd = true;\n      }\n    }\n      \n  },\n  // resize 重绘\n  resize: function (width, height) {\n    this.render(null, {\n      width,\n      height\n    })\n  },\n  // 接收数据\n  data: function (data) {\n    // 当数据更新时立即更新视图渲染，否则在下次loop时再更新数据\n    if(data) {\n      if(this.config.global.ifUpdateImd && this._data && !_.isEqual(this._data, data)) {\n        this.isInit = true;\n        this.startIndex = 0;\n        this.initRank();\n      }\n      this._data = data;\n    } \n    return this._data;\n  },\n  // 配置合并\n  mergeConfig: function (config) {\n    console.log('mergeConfig')\n    if (!config) return this.config;\n\n    var _config = _.cloneDeep(config);\n    nextCfg = _.defaultsDeep(config || {}, this.config);\n    nextCfg.series = _config.series || this.config.series;\n    // 比对配置不一样则重新初始化\n    if(!_.isEqual(this.config, nextCfg)) {\n      this.config = nextCfg;\n      this.isInit = true;\n      this.startIndex = 0;\n      this.initRank();\n    };\n    return this.config\n  },\n  // 样式更新\n  updateStyle: function () { },\n  // 组件销毁回调\n  destroy: function () {\n    this.removeTimer();\n    this.removeTextTimer();\n    this.container.find(\".row-content\").off();\n    this.container.empty();\n    this._data = null;\n    this.off && this.off();\n  }\n});\n","code":"\"use strict\";\n\nvar Event = require(\"bcore/event\");\nvar $ = require(\"jquery\");\nvar _ = require(\"lodash\");\nvar anime = require(\"animejs\");\n\nmodule.exports = Event.extend(function (container, config) {\n  console.log('constructor');\n  this.container = $(container);\n  this.config = {\n    width: this.container.width(),\n    height: this.container.height(),\n    \"background-color\": \"transparent\",\n    theme: {},\n    global: {\n      animation: {\n        singleStop: !1\n      },\n      ifRowHidden: !1,\n      textAnimate: {\n        ifRun: !1,\n        animateDur: 2\n      },\n      ifUpdateImd: !1\n    }\n  };\n\n  this.headerTpl = function (header) {\n    return \"\\n    <div class=\\\"line header\\\" style=\\\"\\n      display: flex;\\n      align-items: center;\\n      background-color: \" + header.backgroundColor + \";\\n      height: \" + header.height + \"px;\\n      text-overflow: \\n      ellipsis;\\n      white-space: nowrap;\\n      overflow: hidden;\\n      vertical-align: middle;\\n      color: \" + header.color + \";\\\"\\n    >\\n      \" + (header.hasIndex && \"\\n        <div class=\\\"index-list\\\" style=\\\"\\n          display: inline-block;\\n          vertical-align: middle;\\n          width: \" + header.idListWidth + \"%;\\n          height: \" + header.height + \"px;\\\"\\n        ></div>\\n      \") + \"\\n      \" + header.column + \"\\n    </div>\\n  \";\n  };\n\n  this.rowTpl = function (row) {\n    return \"\\n    <div class=\\\"line row-content\\\" style=\\\"\\n      height: \" + row.height + \"px;\\n      text-overflow: ellipsis;\\n      overflow: hidden;\\n      vertical-align: middle; \\n      display: flex;\\n      align-items: center;\\n      background-color: \" + row.bgColor + \";\\\"\\n    >\\n      \" + (row.hasIndex && \"\\n        <div class=\\\"index\\\" style=\\\"\\n          display: inline-block;\\n          text-align: center;\\n          vertical-align: middle;\\n          width: \" + row.idListWidth + \"%;\\n          color: \" + row.idListColor + \";\\n          font-size: \" + row.idListFontSize + \"px;\\\"\\n        >\\n          <div class=\\\"index-bg\\\" style=\\\"\\n            background-color: \" + row.idListBgColor + \"; \\n            font-weight: \" + row.fontWeight + \"; \\n            width: \" + row.bgSize + \"px;\\n            height: \" + row.bgSize + \"px;\\n            line-height: \" + row.bgSize + \"px;\\n            vertical-align: middle;\\n            margin: auto;\\n            border-radius: \" + row.radius + \"px;\\n            text-align: center;\\\"\\n          >\\n          </div>\\n        </div>\\n      \") + \"\\n    </div>\\n  \";\n  };\n\n  this.cellTpl = function (cell) {\n    return \"\\n    <div class=\\\"\" + cell.classname + \"\\\" style=\\\"\\n      width: \" + cell.width + \"%;\\n      display:inline-block;\\n      text-align: \" + cell.textAlign + \";\\n      \" + (cell.isBr ? \"word-break:break-all;\" : \"white-space: nowrap;\") + \"\\n      overflow: hidden;\\n      vertical-align: middle;\\n      background-color: transparent;\\n      font-size: \" + cell.fontSize + \"px;\\n      color: \" + cell.color + \";\\n      font-weight: \" + cell.fontWeight + \";\\\"\\n    >\\n      \" + cell.content + \"\\n      <div class=\\\"marquee-text\\\" style=\\\"display: inline-block;\\\">\\n        <span style=\\\"display: inline-block;\\\" class=\\\"marquee-text-span\\\"></span>\\n        <i class=\\\"whiteSpace\\\" style=\\\"display:inline-block;width:\" + cell.whiteWidth + \";\\\"></i>\\n        \" + (cell.ifRun && !cell.isBr ? \"\\n          <span style=\\\"display: inline-block;\\\" class=\\\"marquee-text-span\\\"></span>\\n          <i class=\\\"whiteSpace\\\" style=\\\"display:inline-block;width:\" + cell.whiteWidth + \";\\\"></i>\\n        \" : '') + \"\\n      </div>\\n    </div>\\n  \";\n  };\n  this._data = null, this.apis = config.apis, this.isInit = !0, this.startIndex = 0, this.titleList = [], this.textTimer = {}, this.init(config);\n}, {\n  init: function init(config) {\n    console.log('init');\n    this.mergeConfig(config);\n    this.updateStyle();\n    this.initInteraction();\n  },\n\n  initInteraction: function initInteraction() {\n    var self = this;\n    self.container.css(\"cursor\", \"pointer\");\n    self.container.off(\"mouseenter\").off(\"mouseleave\").on(\"mouseenter\", function () {\n      self.removeTimer();\n    }).on(\"mouseleave\", function (e) {\n      var c = e.toElement || e.relatedTarget;\n      if (!this.contains(c) && self.config.global.isLoop) {\n        self.mouseTimer = setTimeout(self.loop.bind(self), 1e3 * self.config.global.animation.duration);\n      }\n    });\n  },\n  initPool: function initPool() {\n    this.dataPool = [];\n  },\n\n  setHeader: function setHeader(series, header) {\n    var _this = this;\n\n    var headerHtml = '';\n    series.forEach(function (serie) {\n      headerHtml += _this.cellTpl({\n        width: serie.width,\n        height: header.height,\n        content: serie.displayName,\n        textAlign: header.textStyle.textAlign,\n        whiteWidth: 0,\n        classname: \"column column-title\",\n        isBr: header.isBr,\n        ifRun: _this.config.global.textAnimate.ifRun,\n        fontSize: header.textStyle.fontSize,\n        color: header.textStyle.color,\n        fontWeight: header.textStyle.fontWeight\n      });\n    });\n\n    header.column = headerHtml;\n    header.color = header.textStyle.color;\n    header.fontSize = header.textStyle.fontSize;\n    header.fontWeight = header.textStyle.fontWeight;\n\n    this.container.append(this.headerTpl(header));\n  },\n  setRowNodeStr: function setRowNodeStr(rowStyle) {\n    this.rowStr = this.rowTpl(rowStyle);\n  },\n  appendRow: function appendRow(rowCount, series) {\n    var _this2 = this;\n\n    var self = this;\n    for (var i = 0; i < rowCount; i++) {\n      var rowBg2 = this.config.row.backgroundColor2;\n      var $rowEl = $(this.rowStr);\n      var rowStr = \"\";\n\n      1 === i % 2 && $rowEl.css({\n        \"background-color\": rowBg2\n      });\n      series.forEach(function (serie) {\n        rowStr += _this2.cellTpl({\n          width: serie.width,\n          height: serie.height,\n          content: \"\",\n          bgColor: serie.backgroundColor,\n          textAlign: serie.textStyle.textAlign,\n          whiteWidth: 0,\n          classname: \"column cell-content\",\n          isBr: serie.isBr,\n          ifRun: self.config.global.textAnimate.ifRun,\n          fontSize: serie.textStyle.fontSize,\n          color: serie.textStyle.color,\n          fontWeight: serie.textStyle.fontWeight\n        });\n      });\n      $rowEl.append(rowStr);\n      $rowEl.on(\"click\", function () {\n        var data = $(this).data(\"data\");\n        self.emit(\"row-clicked\", data);\n      });\n      this.container.append($rowEl);\n    }\n  },\n\n  removeTimer: function removeTimer() {\n    this.timer && clearTimeout(this.timer);\n    this.mouseTimer && clearTimeout(this.mouseTimer);\n    this.visibleTimer && clearTimeout(this.visibleTimer);\n    this.timer = null;\n    this.mouseTimer = null;\n    this.visibleTimer = null;\n    this.removeTextTimer();\n  },\n\n  removeTargetTextTimer: function removeTargetTextTimer(textTimerId) {\n    if (this.textTimer[textTimerId]) {\n      this.textTimer[textTimerId].pause && this.textTimer[textTimerId].pause();\n      his.textTimer[a] = null;\n    }\n  },\n\n  removeTextTimer: function removeTextTimer() {\n    var _this3 = this;\n\n    _.map(this.textTimer, function (v, i) {\n      if (v) {\n        v.seek && v.seek(0);\n        v.pause && v.pause();\n      }\n      delete _this3.textTimer[i];\n    });\n  },\n\n  initRank: function initRank() {\n    console.log('initRank');\n    var cfg = this.config;\n    this.removeTimer();\n    this.initPool();\n    this.container.find(\".row-content\").off(\"click\");\n    this.container.empty();\n    this.container.css({\n      overflow: \"hidden\",\n      \"background-color\": cfg[\"background-color\"]\n    });\n\n    var header = cfg.header,\n        idList = cfg.idList,\n        series = cfg.series;\n\n\n    this.columnNameList = _.map(series, \"columnName\");\n    console.log(this.columnNameList);\n    if (header.show) {\n      header.hasIndex = idList.show;\n      header.idListWidth = idList.width;\n      header.height = cfg.height * (header.heightPercent / 100);\n      this.setHeader(series, header);\n    } else {\n      header.height = 0;\n    }\n    var rowCount = cfg.global.rowCount;\n\n    var rowStyle = {\n      rowCount: rowCount,\n      height: (cfg.height - header.height) / rowCount,\n      hasIndex: idList.show,\n      idListWidth: idList.width,\n      idListRadius: idList.radius,\n      idListBgColor: idList.backgroundColor,\n      idListColor: idList.textStyle.color,\n      idListFontSize: idList.textStyle.fontSize,\n      bgColor: cfg.row.backgroundColor1,\n      fontWeight: idList.textStyle.fontWeight\n    };\n    rowStyle.bgSize = Math.min(Math.floor(this.container.width() * idList.width / 100), rowStyle.height) * rowStyle.idListRadius / 100 - 4, rowStyle.radius = rowStyle.bgSize / 2;\n\n    this.setRowNodeStr(rowStyle);\n    this.appendRow(rowCount * 2, series);\n  },\n  updateData: function updateData(data) {\n    data && (this.dataPool = data);\n  },\n\n  getData: function getData(dataPool, startIndex, rowCount) {\n    var filterData = [];\n    if (startIndex > dataPool.length - 1) {\n      if (\"bottom\" === this.config.global.animation.mode && 0 < dataPool.length) {\n        startIndex %= dataPool.length;\n      } else {\n        startIndex = 0;\n      }\n    }\n    for (var i = startIndex; i < startIndex + rowCount; i++) {\n      if (dataPool[i] && undefined !== dataPool[i]) {\n        var k = _.cloneDeep(dataPool[i]);\n        k.index = i + 1, filterData.push(k);\n      } else filterData.push({});\n    }\n    return {\n      data: filterData,\n      index: startIndex\n    };\n  },\n  setStartIndex: function setStartIndex(dataPool, startIndex, step) {\n    startIndex += step;\n    startIndex > dataPool.length - 1 && (startIndex = 0), this.startIndex = startIndex;\n  },\n  initFill: function initFill(dataPool, startIndex) {\n    var cfg = this.config;\n    var series = cfg.series;\n    var columnNameList = this.columnNameList || [];\n    $rows = this.container.find(\".row-content:lt(\" + cfg.global.rowCount + \")\");\n    $rows.each(function (index, rowEl) {\n      var item = dataPool[startIndex + index];\n      var $row = $(rowEl);\n      if (item) {\n        $row.find(\".cell-content\").each(function (cIndex, cellEl) {\n          var i = columnNameList[cIndex];\n          var j = series[cIndex].dataType;\n          var renderStr = \"\";\n          if (\"img\" === j) {\n            renderStr = \"<img src=\\\"\" + (item[i] || \"\") + \"\\\" style=\\\"width: \" + series[cIndex].widthPercent + \"%; height: 100%\\\" />\";\n            console.log(renderStr);\n          } else if (item[i] || 0 === +item[i]) {\n            renderStr = item[i];\n          } else {\n            renderStr = \"-\";\n          }\n          var $mt = $(cellEl).find(\".marquee-text\");\n          var $mtSpan = $(cellEl).find(\".marquee-text\").find(\".marquee-text-span\");\n          console.log($mtSpan, renderStr);\n          $mtSpan.html(renderStr);\n          $mt.attr(\"indexnum\", startIndex + index + 1 + \"-\" + cIndex);\n        });\n        $row.data(\"data\", item);\n        $row.find(\".index-bg\").html(startIndex + index + 1);\n      }\n    });\n    this.setStartIndex(dataPool, startIndex, cfg.global.rowCount);\n  },\n\n  calTransform: function calTransform(alignType, b) {\n    var c = b.find(\".marquee-text-span\");\n    if (alignType === 'left') {\n      return 0;\n    } else if (alignType === 'center') {\n      return b.width() / 2 - c.width() / 2;\n    } else if (alignType === 'right') {\n      return b.width() - c.width() - 1;\n    } else {\n      return 0;\n    }\n  },\n\n  fillCell: function fillCell(a, b) {\n    var self = this;\n    var cfg = this.config;\n    var startIndex = a.index;\n    var rowBg1 = cfg.row.backgroundColor1;\n    var rowBg2 = cfg.row.backgroundColor2;\n    var $rows = this.container.find(\".row-content:gt(\" + (cfg.global.rowCount - 1) + \")\");\n    b && ($rows = this.container.find(\".row-content:lt(\" + cfg.global.rowCount + \")\"));\n\n    $rows.each(function (rowIndex, rowEl) {\n      var rowObj = a.data[rowIndex];\n      var realIndex = startIndex + rowIndex + 1;\n      if (rowObj) {\n        if (0 === Object.keys(rowObj).length && cfg.global.ifRowHidden) {\n          return $(rowEl).css(\"opacity\", 0);\n        }\n        $(rowEl).css(\"opacity\", 1);\n        $(rowEl).find(\".cell-content\").each(function (cellIndex, cellEl) {\n          var i = self.columnNameList[cellIndex];\n          var j = self.config.series[cellIndex].dataType;\n          var k = \"\";\n          if (\"img\" === j) {\n            k = \"<img src=\\\"\" + (rowObj[i] || \"\") + \"\\\" style=\\\"width: \" + cfg.series[cellIndex].widthPercent + \"%; height:100%;\\\" />\";\n          } else if (rowObj[i] || 0 === +rowObj[i]) {\n            k = rowObj[i];\n          } else {\n            k = \"-\";\n          }\n          var $mt = $(this).find(\".marquee-text\");\n          var $mtSpan = $(this).find(\".marquee-text\").find(\".marquee-text-span\");\n          var indexNum = realIndex + \"-\" + cellIndex;\n          console.log($mtSpan, k);\n          $mtSpan.html(k);\n          $mt.attr(\"indexnum\", indexNum);\n          $(cellEl).find(\".whiteSpace\").css({\n            width: $(cellEl).width() - $($mtSpan[0]).width() - 1\n          });\n          if (j !== 'img') {\n            $mt.css(\"transform\", \"translateX(\" + self.calTransform(cfg.series[cellIndex].textStyle.textAlign, $(this)) + \"px)\");\n          }\n\n          if (!cfg.series[cellIndex].isBr && cfg.global.textAnimate.ifRun && $mtSpan.width() > $(this).width() && $mt.attr(\"indexnum\") === indexNum) {\n            self.removeTargetTextTimer(indexNum);\n            self.textRun(indexNum, $mt, cellIndex);\n          }\n        }), $(rowEl).css(\"background-color\", 0 == realIndex % 2 ? rowBg1 : rowBg2), $(rowEl).data(\"data\", rowObj), $(rowEl).find(\".index-bg\").html(realIndex);\n      }\n    });\n  },\n\n  textRun: function textRun(textTimerId, $mt, cellIndex) {\n    var _this4 = this;\n\n    var _config2 = this.config,\n        animateDur = _config2.global.textAnimate.animateDur,\n        series = _config2.series;\n\n    setTimeout(function () {\n      _this4.textTimer[textTimerId] = anime({\n        targets: $mt[0],\n        translateX: -$mt.outerWidth() / 2 + _this4.calTransform(series[cellIndex].textStyle.textAlign, $mt.parent()),\n        duration: 1e3 * animateDur,\n        loop: true,\n        delay: 500,\n        easing: \"linear\"\n      });\n    }, 0);\n  },\n\n  animation: function animation() {\n    var _this5 = this;\n\n    var aniEl = this.config.global.animation.mode === \"bottom\" ? this.container.find(\".row-content:first\") : this.container.find(\".row-content:lt(\" + this.config.global.rowCount + \")\");\n    var count = 0;\n    var aniCb = function aniCb() {\n      count++;\n      if (count >= aniEl.length) {\n        aniEl.off(\"transitionend\", aniCb);\n        var fragment = document.createDocumentFragment();\n        aniEl.each(function (i, el) {\n          fragment.appendChild(el);\n        }), _this5.container[0].appendChild(fragment);\n        aniEl.css({\n          transition: \"none\",\n          height: (_this5.config.height - _this5.config.header.height) / _this5.config.global.rowCount + \"px\"\n        });\n      }\n    };\n    aniEl.on(\"transitionend\", aniCb);\n    aniEl.css({\n      height: 0,\n      transition: \"height 400ms linear\"\n    });\n  },\n\n  loop: function loop() {\n    var _config$global = this.config.global,\n        _config$global$animat = _config$global.animation,\n        mode = _config$global$animat.mode,\n        duration = _config$global$animat.duration,\n        rowCount = _config$global.rowCount;\n\n    this.removeTimer();\n    if (this.dataPool) {\n      var step;\n      if (mode === 'bottom') {\n        step = 1;\n        ++rowCount;\n      } else {\n        step = rowCount;\n        rowCount *= 2;\n      }\n      if (this.isInit) {\n        this.initFill(this.dataPool, this.startIndex);\n      } else {\n        var data = this.getData(this.dataPool, this.startIndex, rowCount);\n        this.fillCell(data);\n        this.animation();\n        this.setStartIndex(this.dataPool, this.startIndex, step);\n      }\n      this.timer = setTimeout(this.reset.bind(this), 1e3 * duration);\n    }\n  },\n  reset: function reset() {\n    this.loop();\n  },\n  render: function render(_data, config) {\n    var _this6 = this;\n\n    console.log('render');\n    var self = this;\n    var cfg = this.mergeConfig(config);\n    var data = this.data(_data);\n\n    this.container.css({\n      fontFamily: \"\\\"\" + cfg.global.fontFamily + \"\\\"\"\n    });\n    this.container.find(\".header\").css({\n      fontFamily: \"\\\"\" + cfg.header.textStyle.fontFamily + \"\\\"\"\n    });\n    if (data) {\n      this.updateData(data);\n\n      if (!cfg.global.isLoop || cfg.global.animation.singleStop && data.length <= cfg.global.rowCount) {\n        this.removeTimer();\n        this.isInit = true;\n        if (this.dataPool) {\n          var _data2 = this.getData(this.dataPool, 0, cfg.global.rowCount);\n          this.fillCell(_data2, !self.isLoop);\n        }\n      } else {\n        if (this.isInit) {\n          this.removeTimer();\n          if (this.dataPool) {\n            var _data3 = this.getData(this.dataPool, this.startIndex, cfg.global.rowCount);\n            this.fillCell(_data3, !self.isLoop);\n          }\n          this.loop();\n          this.isInit = false;\n        }\n        this.visibleEventAdd || document.addEventListener(\"visibilitychange\", function () {\n          self.visibleTimer && clearTimeout(self.visibleTimer);\n          var a = document.visibilityState;\n          if (document.visibilityState === 'visible') {\n            self.visibleTimer = setTimeout(self.loop.bind(self), 1e3 * self.config.global.animation.duration);\n          } else if (document.visibilityState === 'hidden') {\n            clearTimeout(self.visibleTimer);\n            _this6.removeTimer();\n            _this6.removeTextTimer();\n          }\n        });\n        this.visibleEventAdd = true;\n      }\n    }\n  },\n\n  resize: function resize(width, height) {\n    this.render(null, {\n      width: width,\n      height: height\n    });\n  },\n\n  data: function data(_data4) {\n    if (_data4) {\n      if (this.config.global.ifUpdateImd && this._data && !_.isEqual(this._data, _data4)) {\n        this.isInit = true;\n        this.startIndex = 0;\n        this.initRank();\n      }\n      this._data = _data4;\n    }\n    return this._data;\n  },\n\n  mergeConfig: function mergeConfig(config) {\n    console.log('mergeConfig');\n    if (!config) return this.config;\n\n    var _config = _.cloneDeep(config);\n    nextCfg = _.defaultsDeep(config || {}, this.config);\n    nextCfg.series = _config.series || this.config.series;\n\n    if (!_.isEqual(this.config, nextCfg)) {\n      this.config = nextCfg;\n      this.isInit = true;\n      this.startIndex = 0;\n      this.initRank();\n    };\n    return this.config;\n  },\n\n  updateStyle: function updateStyle() {},\n\n  destroy: function destroy() {\n    this.removeTimer();\n    this.removeTextTimer();\n    this.container.find(\".row-content\").off();\n    this.container.empty();\n    this._data = null;\n    this.off && this.off();\n  }\n});","codeWraped":"Cube(\"/index.js\", [\"/node_modules/bcore/event.js\", \"/node_modules/jquery/dist/jquery.js\", \"/node_modules/lodash/lodash.js\", \"/node_modules/animejs/lib/anime.js\"], function (module, exports, require, load, process, global) {\n\n  var Event = require('/node_modules/bcore/event.js');\n  var $ = require('/node_modules/jquery/dist/jquery.js');\n  var _ = require('/node_modules/lodash/lodash.js');\n  var anime = require('/node_modules/animejs/lib/anime.js');\n\n  module.exports = Event.extend(function (container, config) {\n    console.log('constructor');\n    this.container = $(container);\n    this.config = {\n      width: this.container.width(),\n      height: this.container.height(),\n      \"background-color\": \"transparent\",\n      theme: {},\n      global: {\n        animation: {\n          singleStop: !1 },\n\n        ifRowHidden: !1,\n        textAnimate: {\n          ifRun: !1,\n          animateDur: 2 },\n\n        ifUpdateImd: !1 } };\n\n\n\n    this.headerTpl = function (header) {\n      return \"\\n    <div class=\\\"line header\\\" style=\\\"\\n      display: flex;\\n      align-items: center;\\n      background-color: \" + header.backgroundColor + \";\\n      height: \" + header.height + \"px;\\n      text-overflow: \\n      ellipsis;\\n      white-space: nowrap;\\n      overflow: hidden;\\n      vertical-align: middle;\\n      color: \" + header.color + \";\\\"\\n    >\\n      \" + (header.hasIndex && \"\\n        <div class=\\\"index-list\\\" style=\\\"\\n          display: inline-block;\\n          vertical-align: middle;\\n          width: \" + header.idListWidth + \"%;\\n          height: \" + header.height + \"px;\\\"\\n        ></div>\\n      \") + \"\\n      \" + header.column + \"\\n    </div>\\n  \";\n    };\n\n    this.rowTpl = function (row) {\n      return \"\\n    <div class=\\\"line row-content\\\" style=\\\"\\n      height: \" + row.height + \"px;\\n      text-overflow: ellipsis;\\n      overflow: hidden;\\n      vertical-align: middle; \\n      display: flex;\\n      align-items: center;\\n      background-color: \" + row.bgColor + \";\\\"\\n    >\\n      \" + (row.hasIndex && \"\\n        <div class=\\\"index\\\" style=\\\"\\n          display: inline-block;\\n          text-align: center;\\n          vertical-align: middle;\\n          width: \" + row.idListWidth + \"%;\\n          color: \" + row.idListColor + \";\\n          font-size: \" + row.idListFontSize + \"px;\\\"\\n        >\\n          <div class=\\\"index-bg\\\" style=\\\"\\n            background-color: \" + row.idListBgColor + \"; \\n            font-weight: \" + row.fontWeight + \"; \\n            width: \" + row.bgSize + \"px;\\n            height: \" + row.bgSize + \"px;\\n            line-height: \" + row.bgSize + \"px;\\n            vertical-align: middle;\\n            margin: auto;\\n            border-radius: \" + row.radius + \"px;\\n            text-align: center;\\\"\\n          >\\n          </div>\\n        </div>\\n      \") + \"\\n    </div>\\n  \";\n    };\n\n    this.cellTpl = function (cell) {\n      return \"\\n    <div class=\\\"\" + cell.classname + \"\\\" style=\\\"\\n      width: \" + cell.width + \"%;\\n      display:inline-block;\\n      text-align: \" + cell.textAlign + \";\\n      \" + (cell.isBr ? \"word-break:break-all;\" : \"white-space: nowrap;\") + \"\\n      overflow: hidden;\\n      vertical-align: middle;\\n      background-color: transparent;\\n      font-size: \" + cell.fontSize + \"px;\\n      color: \" + cell.color + \";\\n      font-weight: \" + cell.fontWeight + \";\\\"\\n    >\\n      \" + cell.content + \"\\n      <div class=\\\"marquee-text\\\" style=\\\"display: inline-block;\\\">\\n        <span style=\\\"display: inline-block;\\\" class=\\\"marquee-text-span\\\"></span>\\n        <i class=\\\"whiteSpace\\\" style=\\\"display:inline-block;width:\" + cell.whiteWidth + \";\\\"></i>\\n        \" + (cell.ifRun && !cell.isBr ? \"\\n          <span style=\\\"display: inline-block;\\\" class=\\\"marquee-text-span\\\"></span>\\n          <i class=\\\"whiteSpace\\\" style=\\\"display:inline-block;width:\" + cell.whiteWidth + \";\\\"></i>\\n        \" : '') + \"\\n      </div>\\n    </div>\\n  \";\n    };\n    this._data = null, this.apis = config.apis, this.isInit = !0, this.startIndex = 0, this.titleList = [], this.textTimer = {}, this.init(config);\n  }, {\n    init: function init(config) {\n      console.log('init');\n      this.mergeConfig(config);\n      this.updateStyle();\n      this.initInteraction();\n    },\n\n    initInteraction: function initInteraction() {\n      var self = this;\n      self.container.css(\"cursor\", \"pointer\");\n      self.container.off(\"mouseenter\").off(\"mouseleave\").on(\"mouseenter\", function () {\n        self.removeTimer();\n      }).on(\"mouseleave\", function (e) {\n        var c = e.toElement || e.relatedTarget;\n        if (!this.contains(c) && self.config.global.isLoop) {\n          self.mouseTimer = setTimeout(self.loop.bind(self), 1e3 * self.config.global.animation.duration);\n        }\n      });\n    },\n    initPool: function initPool() {\n      this.dataPool = [];\n    },\n\n    setHeader: function setHeader(series, header) {\n      var _this = this;\n\n      var headerHtml = '';\n      series.forEach(function (serie) {\n        headerHtml += _this.cellTpl({\n          width: serie.width,\n          height: header.height,\n          content: serie.displayName,\n          textAlign: header.textStyle.textAlign,\n          whiteWidth: 0,\n          classname: \"column column-title\",\n          isBr: header.isBr,\n          ifRun: _this.config.global.textAnimate.ifRun,\n          fontSize: header.textStyle.fontSize,\n          color: header.textStyle.color,\n          fontWeight: header.textStyle.fontWeight });\n\n      });\n\n      header.column = headerHtml;\n      header.color = header.textStyle.color;\n      header.fontSize = header.textStyle.fontSize;\n      header.fontWeight = header.textStyle.fontWeight;\n\n      this.container.append(this.headerTpl(header));\n    },\n    setRowNodeStr: function setRowNodeStr(rowStyle) {\n      this.rowStr = this.rowTpl(rowStyle);\n    },\n    appendRow: function appendRow(rowCount, series) {\n      var _this2 = this;\n\n      var self = this;\n      for (var i = 0; i < rowCount; i++) {\n        var rowBg2 = this.config.row.backgroundColor2;\n        var $rowEl = $(this.rowStr);\n        var rowStr = \"\";\n\n        1 === i % 2 && $rowEl.css({\n          \"background-color\": rowBg2 });\n\n        series.forEach(function (serie) {\n          rowStr += _this2.cellTpl({\n            width: serie.width,\n            height: serie.height,\n            content: \"\",\n            bgColor: serie.backgroundColor,\n            textAlign: serie.textStyle.textAlign,\n            whiteWidth: 0,\n            classname: \"column cell-content\",\n            isBr: serie.isBr,\n            ifRun: self.config.global.textAnimate.ifRun,\n            fontSize: serie.textStyle.fontSize,\n            color: serie.textStyle.color,\n            fontWeight: serie.textStyle.fontWeight });\n\n        });\n        $rowEl.append(rowStr);\n        $rowEl.on(\"click\", function () {\n          var data = $(this).data(\"data\");\n          self.emit(\"row-clicked\", data);\n        });\n        this.container.append($rowEl);\n      }\n    },\n\n    removeTimer: function removeTimer() {\n      this.timer && clearTimeout(this.timer);\n      this.mouseTimer && clearTimeout(this.mouseTimer);\n      this.visibleTimer && clearTimeout(this.visibleTimer);\n      this.timer = null;\n      this.mouseTimer = null;\n      this.visibleTimer = null;\n      this.removeTextTimer();\n    },\n\n    removeTargetTextTimer: function removeTargetTextTimer(textTimerId) {\n      if (this.textTimer[textTimerId]) {\n        this.textTimer[textTimerId].pause && this.textTimer[textTimerId].pause();\n        his.textTimer[a] = null;\n      }\n    },\n\n    removeTextTimer: function removeTextTimer() {\n      var _this3 = this;\n\n      _.map(this.textTimer, function (v, i) {\n        if (v) {\n          v.seek && v.seek(0);\n          v.pause && v.pause();\n        }\n        delete _this3.textTimer[i];\n      });\n    },\n\n    initRank: function initRank() {\n      console.log('initRank');\n      var cfg = this.config;\n      this.removeTimer();\n      this.initPool();\n      this.container.find(\".row-content\").off(\"click\");\n      this.container.empty();\n      this.container.css({\n        overflow: \"hidden\",\n        \"background-color\": cfg[\"background-color\"] });\n\n\n      var header = cfg.header,\n      idList = cfg.idList,\n      series = cfg.series;\n\n\n      this.columnNameList = _.map(series, \"columnName\");\n      console.log(this.columnNameList);\n      if (header.show) {\n        header.hasIndex = idList.show;\n        header.idListWidth = idList.width;\n        header.height = cfg.height * (header.heightPercent / 100);\n        this.setHeader(series, header);\n      } else {\n        header.height = 0;\n      }\n      var rowCount = cfg.global.rowCount;\n\n      var rowStyle = {\n        rowCount: rowCount,\n        height: (cfg.height - header.height) / rowCount,\n        hasIndex: idList.show,\n        idListWidth: idList.width,\n        idListRadius: idList.radius,\n        idListBgColor: idList.backgroundColor,\n        idListColor: idList.textStyle.color,\n        idListFontSize: idList.textStyle.fontSize,\n        bgColor: cfg.row.backgroundColor1,\n        fontWeight: idList.textStyle.fontWeight };\n\n      rowStyle.bgSize = Math.min(Math.floor(this.container.width() * idList.width / 100), rowStyle.height) * rowStyle.idListRadius / 100 - 4, rowStyle.radius = rowStyle.bgSize / 2;\n\n      this.setRowNodeStr(rowStyle);\n      this.appendRow(rowCount * 2, series);\n    },\n    updateData: function updateData(data) {\n      data && (this.dataPool = data);\n    },\n\n    getData: function getData(dataPool, startIndex, rowCount) {\n      var filterData = [];\n      if (startIndex > dataPool.length - 1) {\n        if (\"bottom\" === this.config.global.animation.mode && 0 < dataPool.length) {\n          startIndex %= dataPool.length;\n        } else {\n          startIndex = 0;\n        }\n      }\n      for (var i = startIndex; i < startIndex + rowCount; i++) {\n        if (dataPool[i] && undefined !== dataPool[i]) {\n          var k = _.cloneDeep(dataPool[i]);\n          k.index = i + 1, filterData.push(k);\n        } else filterData.push({});\n      }\n      return {\n        data: filterData,\n        index: startIndex };\n\n    },\n    setStartIndex: function setStartIndex(dataPool, startIndex, step) {\n      startIndex += step;\n      startIndex > dataPool.length - 1 && (startIndex = 0), this.startIndex = startIndex;\n    },\n    initFill: function initFill(dataPool, startIndex) {\n      var cfg = this.config;\n      var series = cfg.series;\n      var columnNameList = this.columnNameList || [];\n      $rows = this.container.find(\".row-content:lt(\" + cfg.global.rowCount + \")\");\n      $rows.each(function (index, rowEl) {\n        var item = dataPool[startIndex + index];\n        var $row = $(rowEl);\n        if (item) {\n          $row.find(\".cell-content\").each(function (cIndex, cellEl) {\n            var i = columnNameList[cIndex];\n            var j = series[cIndex].dataType;\n            var renderStr = \"\";\n            if (\"img\" === j) {\n              renderStr = \"<img src=\\\"\" + (item[i] || \"\") + \"\\\" style=\\\"width: \" + series[cIndex].widthPercent + \"%; height: 100%\\\" />\";\n              console.log(renderStr);\n            } else if (item[i] || 0 === +item[i]) {\n              renderStr = item[i];\n            } else {\n              renderStr = \"-\";\n            }\n            var $mt = $(cellEl).find(\".marquee-text\");\n            var $mtSpan = $(cellEl).find(\".marquee-text\").find(\".marquee-text-span\");\n            console.log($mtSpan, renderStr);\n            $mtSpan.html(renderStr);\n            $mt.attr(\"indexnum\", startIndex + index + 1 + \"-\" + cIndex);\n          });\n          $row.data(\"data\", item);\n          $row.find(\".index-bg\").html(startIndex + index + 1);\n        }\n      });\n      this.setStartIndex(dataPool, startIndex, cfg.global.rowCount);\n    },\n\n    calTransform: function calTransform(alignType, b) {\n      var c = b.find(\".marquee-text-span\");\n      if (alignType === 'left') {\n        return 0;\n      } else if (alignType === 'center') {\n        return b.width() / 2 - c.width() / 2;\n      } else if (alignType === 'right') {\n        return b.width() - c.width() - 1;\n      } else {\n        return 0;\n      }\n    },\n\n    fillCell: function fillCell(a, b) {\n      var self = this;\n      var cfg = this.config;\n      var startIndex = a.index;\n      var rowBg1 = cfg.row.backgroundColor1;\n      var rowBg2 = cfg.row.backgroundColor2;\n      var $rows = this.container.find(\".row-content:gt(\" + (cfg.global.rowCount - 1) + \")\");\n      b && ($rows = this.container.find(\".row-content:lt(\" + cfg.global.rowCount + \")\"));\n\n      $rows.each(function (rowIndex, rowEl) {\n        var rowObj = a.data[rowIndex];\n        var realIndex = startIndex + rowIndex + 1;\n        if (rowObj) {\n          if (0 === Object.keys(rowObj).length && cfg.global.ifRowHidden) {\n            return $(rowEl).css(\"opacity\", 0);\n          }\n          $(rowEl).css(\"opacity\", 1);\n          $(rowEl).find(\".cell-content\").each(function (cellIndex, cellEl) {\n            var i = self.columnNameList[cellIndex];\n            var j = self.config.series[cellIndex].dataType;\n            var k = \"\";\n            if (\"img\" === j) {\n              k = \"<img src=\\\"\" + (rowObj[i] || \"\") + \"\\\" style=\\\"width: \" + cfg.series[cellIndex].widthPercent + \"%; height:100%;\\\" />\";\n            } else if (rowObj[i] || 0 === +rowObj[i]) {\n              k = rowObj[i];\n            } else {\n              k = \"-\";\n            }\n            var $mt = $(this).find(\".marquee-text\");\n            var $mtSpan = $(this).find(\".marquee-text\").find(\".marquee-text-span\");\n            var indexNum = realIndex + \"-\" + cellIndex;\n            console.log($mtSpan, k);\n            $mtSpan.html(k);\n            $mt.attr(\"indexnum\", indexNum);\n            $(cellEl).find(\".whiteSpace\").css({\n              width: $(cellEl).width() - $($mtSpan[0]).width() - 1 });\n\n            if (j !== 'img') {\n              $mt.css(\"transform\", \"translateX(\" + self.calTransform(cfg.series[cellIndex].textStyle.textAlign, $(this)) + \"px)\");\n            }\n\n            if (!cfg.series[cellIndex].isBr && cfg.global.textAnimate.ifRun && $mtSpan.width() > $(this).width() && $mt.attr(\"indexnum\") === indexNum) {\n              self.removeTargetTextTimer(indexNum);\n              self.textRun(indexNum, $mt, cellIndex);\n            }\n          }), $(rowEl).css(\"background-color\", 0 == realIndex % 2 ? rowBg1 : rowBg2), $(rowEl).data(\"data\", rowObj), $(rowEl).find(\".index-bg\").html(realIndex);\n        }\n      });\n    },\n\n    textRun: function textRun(textTimerId, $mt, cellIndex) {\n      var _this4 = this;\n\n      var _config2 = this.config,\n      animateDur = _config2.global.textAnimate.animateDur,\n      series = _config2.series;\n\n      setTimeout(function () {\n        _this4.textTimer[textTimerId] = anime({\n          targets: $mt[0],\n          translateX: -$mt.outerWidth() / 2 + _this4.calTransform(series[cellIndex].textStyle.textAlign, $mt.parent()),\n          duration: 1e3 * animateDur,\n          loop: true,\n          delay: 500,\n          easing: \"linear\" });\n\n      }, 0);\n    },\n\n    animation: function animation() {\n      var _this5 = this;\n\n      var aniEl = this.config.global.animation.mode === \"bottom\" ? this.container.find(\".row-content:first\") : this.container.find(\".row-content:lt(\" + this.config.global.rowCount + \")\");\n      var count = 0;\n      var aniCb = function aniCb() {\n        count++;\n        if (count >= aniEl.length) {\n          aniEl.off(\"transitionend\", aniCb);\n          var fragment = document.createDocumentFragment();\n          aniEl.each(function (i, el) {\n            fragment.appendChild(el);\n          }), _this5.container[0].appendChild(fragment);\n          aniEl.css({\n            transition: \"none\",\n            height: (_this5.config.height - _this5.config.header.height) / _this5.config.global.rowCount + \"px\" });\n\n        }\n      };\n      aniEl.on(\"transitionend\", aniCb);\n      aniEl.css({\n        height: 0,\n        transition: \"height 400ms linear\" });\n\n    },\n\n    loop: function loop() {\n      var _config$global = this.config.global,\n      _config$global$animat = _config$global.animation,\n      mode = _config$global$animat.mode,\n      duration = _config$global$animat.duration,\n      rowCount = _config$global.rowCount;\n\n      this.removeTimer();\n      if (this.dataPool) {\n        var step;\n        if (mode === 'bottom') {\n          step = 1;\n          ++rowCount;\n        } else {\n          step = rowCount;\n          rowCount *= 2;\n        }\n        if (this.isInit) {\n          this.initFill(this.dataPool, this.startIndex);\n        } else {\n          var data = this.getData(this.dataPool, this.startIndex, rowCount);\n          this.fillCell(data);\n          this.animation();\n          this.setStartIndex(this.dataPool, this.startIndex, step);\n        }\n        this.timer = setTimeout(this.reset.bind(this), 1e3 * duration);\n      }\n    },\n    reset: function reset() {\n      this.loop();\n    },\n    render: function render(_data, config) {\n      var _this6 = this;\n\n      console.log('render');\n      var self = this;\n      var cfg = this.mergeConfig(config);\n      var data = this.data(_data);\n\n      this.container.css({\n        fontFamily: \"\\\"\" + cfg.global.fontFamily + \"\\\"\" });\n\n      this.container.find(\".header\").css({\n        fontFamily: \"\\\"\" + cfg.header.textStyle.fontFamily + \"\\\"\" });\n\n      if (data) {\n        this.updateData(data);\n\n        if (!cfg.global.isLoop || cfg.global.animation.singleStop && data.length <= cfg.global.rowCount) {\n          this.removeTimer();\n          this.isInit = true;\n          if (this.dataPool) {\n            var _data2 = this.getData(this.dataPool, 0, cfg.global.rowCount);\n            this.fillCell(_data2, !self.isLoop);\n          }\n        } else {\n          if (this.isInit) {\n            this.removeTimer();\n            if (this.dataPool) {\n              var _data3 = this.getData(this.dataPool, this.startIndex, cfg.global.rowCount);\n              this.fillCell(_data3, !self.isLoop);\n            }\n            this.loop();\n            this.isInit = false;\n          }\n          this.visibleEventAdd || document.addEventListener(\"visibilitychange\", function () {\n            self.visibleTimer && clearTimeout(self.visibleTimer);\n            var a = document.visibilityState;\n            if (document.visibilityState === 'visible') {\n              self.visibleTimer = setTimeout(self.loop.bind(self), 1e3 * self.config.global.animation.duration);\n            } else if (document.visibilityState === 'hidden') {\n              clearTimeout(self.visibleTimer);\n              _this6.removeTimer();\n              _this6.removeTextTimer();\n            }\n          });\n          this.visibleEventAdd = true;\n        }\n      }\n    },\n\n    resize: function resize(width, height) {\n      this.render(null, {\n        width: width,\n        height: height });\n\n    },\n\n    data: function data(_data4) {\n      if (_data4) {\n        if (this.config.global.ifUpdateImd && this._data && !_.isEqual(this._data, _data4)) {\n          this.isInit = true;\n          this.startIndex = 0;\n          this.initRank();\n        }\n        this._data = _data4;\n      }\n      return this._data;\n    },\n\n    mergeConfig: function mergeConfig(config) {\n      console.log('mergeConfig');\n      if (!config) return this.config;\n\n      var _config = _.cloneDeep(config);\n      nextCfg = _.defaultsDeep(config || {}, this.config);\n      nextCfg.series = _config.series || this.config.series;\n\n      if (!_.isEqual(this.config, nextCfg)) {\n        this.config = nextCfg;\n        this.isInit = true;\n        this.startIndex = 0;\n        this.initRank();\n      };\n      return this.config;\n    },\n\n    updateStyle: function updateStyle() {},\n\n    destroy: function destroy() {\n      this.removeTimer();\n      this.removeTextTimer();\n      this.container.find(\".row-content\").off();\n      this.container.empty();\n      this._data = null;\n      this.off && this.off();\n    } });return module.exports;});","sourceMap":null,"modifyTime":1559996118800,"mime":"application/javascript","wrap":true,"skip":false,"compress":false,"ext":".js","targetExt":".js","loads":[],"originalLoads":[],"requires":["/node_modules/bcore/event.js","/node_modules/jquery/dist/jquery.js","/node_modules/lodash/lodash.js","/node_modules/animejs/lib/anime.js"],"requiresOrigin":["/node_modules/bcore/event.js","/node_modules/jquery/dist/jquery.js","/node_modules/lodash/lodash.js","/node_modules/animejs/lib/anime.js"],"debugInfo":[],"requiresArgsRefer":[{"type":"StringLiteral","start":35,"end":48,"loc":{"start":{"line":3,"column":20},"end":{"line":3,"column":33}},"extra":{"rawValue":"bcore/event","raw":"\"bcore/event\""},"value":"/node_modules/bcore/event.js"},{"type":"StringLiteral","start":67,"end":75,"loc":{"start":{"line":4,"column":16},"end":{"line":4,"column":24}},"extra":{"rawValue":"jquery","raw":"\"jquery\""},"value":"/node_modules/jquery/dist/jquery.js"},{"type":"StringLiteral","start":94,"end":102,"loc":{"start":{"line":5,"column":16},"end":{"line":5,"column":24}},"extra":{"rawValue":"lodash","raw":"\"lodash\""},"value":"/node_modules/lodash/lodash.js"},{"type":"StringLiteral","start":125,"end":134,"loc":{"start":{"line":6,"column":20},"end":{"line":6,"column":29}},"extra":{"rawValue":"animejs","raw":"\"animejs\""},"value":"/node_modules/animejs/lib/anime.js"}]}